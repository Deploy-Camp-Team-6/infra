---
- name: Set timezone
  timezone:
    name: "{{ timezone }}"
  notify: restart cron

- name: Update apt cache and upgrade system
  apt:
    update_cache: yes
    upgrade: dist
    cache_valid_time: 3600

- name: Fix broken packages if any
  command: apt-get -f install -y
  changed_when: false
  ignore_errors: yes

- name: Install essential packages (without jq first)
  apt:
    name:
      - curl
      - wget
      - git
      - vim
      - htop
      - tree
      - unzip
      - ca-certificates
      - gnupg
      - lsb-release
      - software-properties-common
      - apt-transport-https
      - python3-pip
      - python3-venv
      - ntp
      - logrotate
      - rsync
    state: present
    update_cache: yes

- name: Install libonig5 dependency for jq
  apt:
    name: libonig5
    state: present
    update_cache: yes
  ignore_errors: yes

- name: Install jq package
  apt:
    name: jq
    state: present
    update_cache: yes
  ignore_errors: yes

- name: Install jq manually if package installation failed
  block:
    - name: Download jq binary
      get_url:
        url: "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
        dest: /usr/local/bin/jq
        mode: '0755'
        owner: root
        group: root
      when: ansible_architecture == "x86_64"

    - name: Download jq binary for ARM64
      get_url:
        url: "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux-arm64"
        dest: /usr/local/bin/jq
        mode: '0755'
        owner: root
        group: root
      when: ansible_architecture == "aarch64"

  rescue:
    - name: Skip jq installation
      debug:
        msg: "jq installation failed, continuing without it"

- name: Verify jq installation
  command: jq --version
  register: jq_version
  changed_when: false
  ignore_errors: yes

- name: Display jq version
  debug:
    msg: "jq version: {{ jq_version.stdout }}"
  when: jq_version.rc == 0

- name: Configure NTP
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
    backup: yes
  notify: restart ntp

- name: Check if systemd-timesyncd is active
  systemd:
    name: systemd-timesyncd
  register: timesyncd_status
  ignore_errors: yes

- name: Stop systemd-timesyncd if running (conflicts with ntp)
  systemd:
    name: systemd-timesyncd
    state: stopped
    enabled: no
  when: timesyncd_status.status is defined and timesyncd_status.status.ActiveState == "active"
  ignore_errors: yes

- name: Enable and start NTP service
  systemd:
    name: ntp
    enabled: yes
    state: started
  ignore_errors: yes

- name: Create docker directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  loop:
    - "{{ docker_dir }}"
    - "{{ docker_compose_dir }}"
    - "{{ docker_secrets_dir }}"
    - "{{ docker_data_dir }}"
    - "{{ docker_data_dir }}/traefik"
    - "{{ docker_data_dir }}/grafana"
    - "{{ docker_data_dir }}/prometheus"
    - "{{ docker_data_dir }}/portainer"

- name: Create deploy user (without docker group initially)
  user:
    name: deploy
    groups: sudo
    shell: /bin/bash
    create_home: yes
    append: yes

- name: Set up deploy user SSH key
  authorized_key:
    user: deploy
    key: "{{ deploy_ssh_key | default(lookup('file', '~/.ssh/id_rsa.pub')) }}"
    state: present
  when: deploy_ssh_key is defined or lookup('file', '~/.ssh/id_rsa.pub', errors='ignore')
  ignore_errors: yes

- name: Configure system limits
  pam_limits:
    domain: "*"
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: 'soft', item: 'nofile', value: '65536' }
    - { type: 'hard', item: 'nofile', value: '65536' }
    - { type: 'soft', item: 'nproc', value: '32768' }
    - { type: 'hard', item: 'nproc', value: '32768' }

- name: Configure sysctl parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { key: 'vm.swappiness', value: '1' }
    - { key: 'vm.max_map_count', value: '262144' }
    - { key: 'net.core.somaxconn', value: '32768' }
    - { key: 'net.ipv4.tcp_max_syn_backlog', value: '32768' }
    - { key: 'net.core.netdev_max_backlog', value: '32768' }

- name: Set up log rotation template
  template:
    src: docker-logs.j2
    dest: /etc/logrotate.d/docker-logs
    mode: '0644'
  ignore_errors: yes